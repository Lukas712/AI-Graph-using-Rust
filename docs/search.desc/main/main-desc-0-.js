searchState.loadedDescShard("main", 0, "Estrutura para armazenar uma caixa delimitadora (bounding …\nReturns the argument unchanged.\nCria uma nova caixa delimitadora a partir de duas cidades, …\nCalls <code>U::from(self)</code>.\nRetorna as coordenadas no formato aceito pela API Overpass.\nEstrutura que representa uma cidade no grafo.\nReturns the argument unchanged.\nRetorna o valor heurístico da cidade.\nRetorna a latitude da cidade.\nRetorna a longitude da cidade.\nRetorna o nome da cidade.\nCalls <code>U::from(self)</code>.\nConstrutor para criar uma nova cidade com nome, …\nDefine o valor heurístico da cidade.\nDefine a latitude e longitude da cidade.\nDefine a longitude da cidade.\nDefine o nome da cidade.\nRetorna uma representação em string da cidade.\nEstrutura que representa o grafo do mapa\nAdiciona uma aresta entre dois nós no grafo com um peso …\nReturns the argument unchanged.\nRetorna uma referência à cidade associada a um índice …\nRetorna o peso da aresta entre dois nós, se existir.\nRetorna todas as cidades de um determinado nível.\nRetorna os vizinhos de um nó específico.\nRetorna o objetivo do grafo, que é a cidade de destino.\nRetorna a raiz do grafo, que é a cidade de origem.\nInsere uma cidade no grafo e associa-a a um nível.\nCalls <code>U::from(self)</code>.\nConstrutor para criar um novo grafo vazio.\nDefine o objetivo do grafo.\nDefine a raiz do grafo.\nA estrutura de dados <code>Map</code> representa um mapa, contendo um …\nCalcula o nível de uma cidade com base em sua heurística …\nCalcula o número de níveis do grafo com base na …\nCria uma caixa delimitadora com base nas cidades de origem …\nCria as cidades do mapa a partir da API [<code>Overpass</code>], …\nCria os caminhos entre as cidades do mapa, adicionando …\nReturns the argument unchanged.\nRetorna uma referência ao grafo contido no mapa.\nRetorna o número de níveis do grafo.\nInsere uma nova cidade no grafo, se ela estiver dentro da …\nInsere a cidade objetivo no grafo e define-a como objetivo.\nInsere a cidade de origem no grafo e define-a como raiz.\nCalls <code>U::from(self)</code>.\nConstrutor para criar um novo mapa a partir de duas …\nImprime as cidades do grafo organizadas por níveis.\nEstrutura para armazenar o resultado da busca.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifica se uma cidade está entre duas outras cidades, …\nFunção para calcular a distância entre duas cidades …\nFunção para calcular o nível de uma cidade com base na …\nObtém todas as cidades dentro de uma caixa delimitadora …\nObtém as coordenadas de uma cidade a partir do nome da …\nFunção para calcular a distância total de um caminho no …\nImprime uma mensagem indicando que nenhum resultado foi …\nImprime detalhes do caminho encontrado, incluindo …\nImprime os resultados da busca, incluindo estatísticas e …\nEstrutura para armazenar o estado de um nó na fila de …\nRealiza uma busca A* no grafo, utilizando o acúmulo de …\nCompara dois estados com base no valor da função f(n).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRealiza uma busca gulosa no grafo, priorizando os nós com …\nRealiza uma busca A* iterativa (IDA*) no grafo, utilizando …\nRealiza uma busca por retrocesso (backtracking) no grafo, …\nRealiza uma busca em largura no grafo, explorando os nós …\nReconstrói o caminho a partir do mapa de pais, já que o …\nRealiza uma busca em profundidade no grafo, explorando os …\nAtributos:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRealiza uma busca gulosa no grafo, priorizando o custo …")
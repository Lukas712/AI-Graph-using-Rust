var searchIndex = new Map(JSON.parse('[["main",{"t":"CCCHHHHCCCCCCFNNNNNNONNNNONONNNNNNOFNNNNNNNNNNNNONOOONNNNNNNNNNNNFNNNNONNNNNNNONNNONONNNNNNSSSFNONNNNNNNNNNONNNNNONNNNNNFNONNNNNOOONNNOONNNNONCCCCCHSHHHHHHHHCCCFHNNNNNNNNONNONNNNNNHHCCCCHHHHFNNNOONNNNNONHNNNNN","n":["data_structure","functions","informed_algorithms","main","read_input","run_algorithm","start_execution","uninformed_algorithms","bounding_box","city","graph","map","search_results","BoundingBox","and","borrow","borrow_mut","clone","clone_into","clone_to_uninit","east","fmt","from","from_cities","into","north","or","south","to_overpass_format","to_owned","try_from","try_into","type_id","vzip","west","City","and","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","from","get_heuristic_value","get_latitude","get_longitude","get_name","heuristic_value","into","latitude","longitude","name","new","or","set_heuristic_value","set_latitude","set_longitude","set_name","to_owned","to_string","try_from","try_into","type_id","vzip","GraphStructure","add_edge","and","borrow","borrow_mut","city_level_map","from","get_city","get_edge_weight","get_entire_level","get_neighbors","get_objective","get_root","graph","insert_city","into","new","objective","or","root","set_objective","set_root","try_from","try_into","type_id","vzip","MARGIN_DEGREES","MARGIN_KM","MIN_BANDS","Map","and","bbox","borrow","borrow_mut","calculate_level","calculate_number_of_levels","create_bounding_box","create_map_cities","create_map_paths","from","get_graph","get_number_of_levels","graph","insert_city","insert_objective","insert_origin","into","new","number_of_levels","or","print_graph_by_levels","try_from","try_into","type_id","vzip","SearchResult","and","avg_branching_factor","borrow","borrow_mut","clone","clone_into","clone_to_uninit","depth","execution_time","expanded","from","into","or","path","path_distance","to_owned","try_from","try_into","type_id","visited","vzip","between_cities","calculate","get_from_api","path_distance","results","is_between_bounding_box","EARTH_RADIUS","calculate_distance_value","calculate_level","get_all_cities_from_bounding_box","get_city_coordinates","calculate_path_distance","print_no_result","print_path","print_results","a_star","greedy_search","ida_star","State","a_star_search","and","borrow","borrow_mut","cmp","compare","eq","equivalent","","f_score","from","into","node","or","partial_cmp","try_from","try_into","type_id","vzip","greedy_search","ida_star_search","backtracking","breadth_first_search","deep_search","ordered_search","backtracking","breadth_first_search","reconstruct_path","depth_search","State","and","borrow","borrow_mut","cost","depth","eq","equivalent","","from","into","node","or","ordered_search","partial_cmp","try_from","try_into","type_id","vzip"],"q":[[0,"main"],[8,"main::data_structure"],[13,"main::data_structure::bounding_box"],[35,"main::data_structure::city"],[65,"main::data_structure::graph"],[91,"main::data_structure::map"],[120,"main::data_structure::search_results"],[142,"main::functions"],[147,"main::functions::between_cities"],[148,"main::functions::calculate"],[151,"main::functions::get_from_api"],[153,"main::functions::path_distance"],[154,"main::functions::results"],[157,"main::informed_algorithms"],[160,"main::informed_algorithms::a_star"],[180,"main::informed_algorithms::greedy_search"],[181,"main::informed_algorithms::ida_star"],[182,"main::uninformed_algorithms"],[186,"main::uninformed_algorithms::backtracking"],[187,"main::uninformed_algorithms::breadth_first_search"],[189,"main::uninformed_algorithms::deep_search"],[190,"main::uninformed_algorithms::ordered_search"],[209,"alloc::string"],[210,"core::option"],[211,"core::ops::function"],[212,"core::error"],[213,"alloc::boxed"],[214,"core::result"],[215,"tower_http::follow_redirect::policy::and"],[216,"tower_http::follow_redirect::policy"],[217,"core::fmt"],[218,"tower_http::follow_redirect::policy::or"],[219,"core::any"],[220,"petgraph::graph_impl"],[221,"std::collections::hash::map"],[222,"alloc::vec"],[223,"core::time"],[224,"core::cmp"]],"i":"``````````````Bb00000000000000000000`Bl0000000000000000000000000000`l000000000000000000000000````j000000000000000000000000`A`00000000000000000000````````````````````Dh00000000000000000```````````Dl00000000000`00000","f":"```{{}b}{{{f{d}}}h}{{{f{j}}{f{d}}c}b{{Ad{{f{l}}}{{n{{Ab{A`}}}}}}}}{{}{{Aj{b{Ah{Af}}}}}}```````{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Bb}}}Bb}{{f{f{B`c}}}b{}}{{fBd}b}{BbBf}{{{f{Bb}}{f{B`Bh}}}Bj}{cc{}}{{{f{Bl}}{f{Bl}}Bf}Bb}{{}c{}}4{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}5{{{f{Bb}}}h}{fc{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}};`{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Bl}}}Bl}{{f{f{B`c}}}b{}}{{fBd}b}{{{f{Bl}}{f{Bl}}}Cb}{cc{}}{{{f{Bl}}}Bf}00{{{f{Bl}}}{{f{d}}}}{BlBf}{{}c{}}11{Blh}{{hBfBfBfBf}Bl}{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{{{f{B`Bl}}Bf}b}00{{{f{B`Bl}}h}b}{fc{}}{{{f{Bl}}}h}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}}`{{{f{B`l}}CdCdBf}b}{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{lCf}{cc{}}{{{f{l}}Cd}{{Ab{{f{Bl}}}}}}{{{f{l}}CdCd}Bf}{{{f{l}}Ch}{{Ab{{Cj{Cd}}}}}}{{{f{l}}Cd}{{Cl{Bf}}}}{{{f{l}}}{{Ab{Cd}}}}0{lCn}{{{f{B`l}}ChBl}Cd}{{}c{}}{{}l}{lAb}{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}1{{{f{B`l}}Cd}b}0{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}}{{}Bf}0{{}Ch}`{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{jAb}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{j}}{f{Bl}}{f{Bl}}}Ch}{{{f{B`j}}{f{Bl}}}b}{{{f{B`j}}}b}{{{f{B`j}}}{{Aj{b{Ah{Af}}}}}}1{cc{}}{{{f{j}}}{{f{l}}}}{{{f{j}}}Ch}{jl}{{{f{B`j}}Bl}b}{{{f{B`j}}BlBl}b}1{{}c{}}{{hh}{{Aj{j{Ah{Af}}}}}}>{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{{{f{j}}}b}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}}`{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{A`D`}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{A`}}}A`}{{f{f{B`c}}}b{}}{{fBd}b}{A`Db}{A`Dd}1{cc{}}{{}c{}}{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{A`Ab}{A`Bf}{fc{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}:{{}c{}}`````{{{f{l}}CdCd{f{Bl}}}Cb}{{}Bf}{{BfBfBfBf}Bf}{{BfBfCh}Ch}{{Bbhh}{{Aj{{Cj{{Df{hBfBf}}}}{Ah{Af}}}}}}{{{f{d}}}{{Aj{{Df{BfBf}}{Ah{Af}}}}}}{{{f{l}}{Cj{Cd}}}Bf}{{}b}{{A`{f{j}}}b}{A`b}````{{{f{l}}}{{Ab{A`}}}}{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{{{f{Dh}}{f{Dh}}}Dj}{{f{f{c}}}Dj{}}{{{f{Dh}}{f{Dh}}}Cb}{{f{f{c}}}Cb{}}0{DhBf}{cc{}}{{}c{}}{DhCd}{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{{{f{Dh}}{f{Dh}}}{{Ab{Dj}}}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}}{{{f{l}}}{{Ab{A`}}}}0````00{{{f{{Cf{CdCd}}}}CdCd}{{Cj{Cd}}}}1`{g{{Al{ig}}}{}{}{{An{ce}}}{{An{ce}}}}{f{{f{c}}}{}}{{{f{B`}}}{{f{B`c}}}{}}{DlBf}{DlDb}{{{f{Dl}}{f{Dl}}}Cb}{{f{f{c}}}Cb{}}0{cc{}}{{}c{}}{DlCd}{g{{Bn{ig}}}{}{}{{An{ce}}}{{An{ce}}}}<{{{f{Dl}}{f{Dl}}}{{Ab{Dj}}}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{fC`}{{}c{}}","D":"Id","p":[[1,"unit"],[1,"str"],[1,"reference",null,null,1],[5,"String",209],[5,"Map",91],[5,"GraphStructure",65],[17,"Output"],[5,"SearchResult",120],[6,"Option",210,null,1],[10,"Fn",211],[10,"Error",212],[5,"Box",213,null,1],[6,"Result",214,null,1],[5,"And",215],[10,"Policy",216],[0,"mut"],[5,"BoundingBox",13],[1,"u8"],[1,"f64"],[5,"Formatter",217],[8,"Result",217],[5,"City",35],[5,"Or",218],[5,"TypeId",219],[1,"bool"],[5,"NodeIndex",220],[5,"HashMap",221],[1,"usize"],[5,"Vec",222],[5,"Neighbors",220],[5,"Graph",220],[1,"f32"],[1,"i32"],[5,"Duration",223],[1,"tuple",null,null,1],[5,"State",160],[6,"Ordering",224],[5,"State",190]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIcAHQAAAA0ADwAHABoAAgAeAAUAJQAGADEAAAAzAAIANwAAADwAAAA+AAMARAADAE8AAABTAAIAWAAGAGAAAwBsAAAAcgABAHUAAwB6AAkAhgANAJUAAACeAAIAowACAKcABACuAAYAtwADAMAABwDKAAEAzQAEAA==","P":[[5,"F"],[6,""],[14,"B,E,P,T"],[15,"T"],[17,""],[18,"T"],[19,""],[22,"T"],[23,""],[24,"U"],[25,""],[26,"B,E,P,T"],[27,""],[29,"T"],[30,"U,T"],[31,"U"],[32,""],[33,"V"],[34,""],[36,"B,E,P,T"],[37,"T"],[39,""],[40,"T"],[41,""],[43,"T"],[44,""],[49,"U"],[50,""],[54,"B,E,P,T"],[55,""],[59,"T"],[60,""],[61,"U,T"],[62,"U"],[63,""],[64,"V"],[66,""],[67,"B,E,P,T"],[68,"T"],[70,""],[71,"T"],[72,""],[80,"U"],[81,""],[83,"B,E,P,T"],[84,""],[87,"U,T"],[88,"U"],[89,""],[90,"V"],[91,""],[95,"B,E,P,T"],[96,""],[97,"T"],[99,""],[104,"T"],[105,""],[111,"U"],[112,""],[114,"B,E,P,T"],[115,""],[116,"U,T"],[117,"U"],[118,""],[119,"V"],[121,"B,E,P,T"],[122,""],[123,"T"],[125,""],[126,"T"],[127,""],[131,"T"],[132,"U"],[133,"B,E,P,T"],[134,""],[136,"T"],[137,"U,T"],[138,"U"],[139,""],[141,"V"],[147,""],[162,"B,E,P,T"],[163,"T"],[165,""],[166,"K"],[167,""],[168,"K"],[170,""],[171,"T"],[172,"U"],[173,""],[174,"B,E,P,T"],[175,""],[176,"U,T"],[177,"U"],[178,""],[179,"V"],[180,""],[191,"B,E,P,T"],[192,"T"],[194,""],[197,"K"],[199,"T"],[200,"U"],[201,""],[202,"B,E,P,T"],[203,""],[205,"U,T"],[206,"U"],[207,""],[208,"V"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[8701]}